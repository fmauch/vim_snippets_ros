global !p
import re
import os

def snakecase(name):
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()

def to_camel_case(name):
    components = name.split('_')
    return components[0] + "".join(x.title() for x in components[1:])

def to_camel_case_first_title(name):
    components = name.split('_')
    return "".join(x.title() for x in components)

def parameter_documentation(keys):
    key_list = keys.split(',')
    if len(key_list) == 0:
        return ''
    out_str = list()
    for key in key_list:
        out_str.append('    -- ' + key.strip().strip('\'') + ' type Documentation')
    return "\n".join(out_str)

def input_key_documentation(input_keys):
    key_list = input_keys.split(',')
    if len(key_list) == 0:
        return ''
    out_str = list()
    for key in key_list:
        out_str.append('    ># ' + key.strip().strip('\'') + ' type Documentation')
    return "\n".join(out_str)

def output_key_documentation(keys):
    key_list = keys.split(',')
    if len(key_list) == 0:
        return ''
    out_str = list()
    for key in key_list:
        out_str.append('    #> ' + key.strip().strip('\'') + ' type Documentation')
    return "\n".join(out_str)

def outcome_documentation(outcomes):
    key_list = outcomes.split(',')
    if len(key_list) == 0:
        return ''
    out_str = list()
    for key in key_list:
        out_str.append('    <= ' + key.strip().strip('\'') + ' type Documentation')
    return "\n".join(out_str)

endglobal

snippet ros_main_node
import rospy


class ${1:ClassName}(object):
    """${2:Add node description here}"""

    def __init__(self):
        rospy.init_node('${3:NodeName}')
        rospy.spin()

if __name__ == '__main__':
    $1()
endsnippet

snippet tf-lookup
try:
    (trans,rot) = ${1:tf_listener}.lookupTransform('${2:target_frame}', '${3:source_frame}', rospy.Time(0))
except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException) as e:
    rospy.logerr('An error occured while looking up tansform: {}'.format(e))
endsnippet

snippet rospy.Publisher
rospy.Publisher(${1:topic_name}, ${2:type}, queue_size=${3:1})
endsnippet

snippet rospy.Subscriber
rospy.Subscriber(${1:topic_name}, ${2:type}, ${3: callback}, queue_size=${4:1})
endsnippet

snippet rospy.Service
rospy.Service(${1:topic_name}, ${2:type}, ${3: callback})
endsnippet

snippet rospy.ServiceProxy
rospy.ServiceProxy(${1:topic_name}, ${2:type})
endsnippet

snippet flexbe_state
#!/usr/bin/env python
'''
This file contains the flexbe state `!p snip.rv = to_camel_case_first_title(os.path.splitext(fn)[0])`
'''

from flexbe_core import EventState, Logger


class `!p snip.rv = to_camel_case_first_title(os.path.splitext(fn)[0])`(EventState):
    '''
    TODO: Please add documetation here

`!p snip.rv = parameter_documentation(t[4])`

`!p snip.rv = input_key_documentation(t[2])`
`!p snip.rv = output_key_documentation(t[3])`

`!p snip.rv = outcome_documentation(t[1])`

    '''

    def __init__(self, ${4}):
        super(`!p snip.rv = to_camel_case_first_title(os.path.splitext(fn)[0])`, self).__init__(
            outcomes=[${1:outcomes}],
            input_keys=[${2: input_keys}],
            output_keys=[${3: output_keys}]
        )


    def execute(self, userdata):
        '''
        Fill this with the code that should be executed cyclically after entering
        '''
        pass

    def on_enter(self, userdata):
        '''
        Code inside this function is evaluated once at entry
        '''
        pass
endsnippet

snippet flexbe_service_state
#!/usr/bin/env python
import rospy

from flexbe_core import EventState, Logger
from flexbe_core.proxy import ProxyServiceCaller

from ${1:ros_package}.srv import ${2:type}, $2Request


class `!p snip.rv = to_camel_case_first_title(fn)`(EventState):
    '''
    State that calls the $1/$2 service

    -- ${3:service_topic} string The service url

`!p snip.rv = input_key_documentation(t[4])`
    #> service_response object The service's response

    <= succeeded The service call succeeded
    <= failed    The service call failed

    '''

    def __init__(self, $3):
        super(`!p snip.rv=to_camel_case_first_title(fn)`).__init__(
            outcomes=['succeeded', 'failed'],
            input_keys=[${4:input_keys}],
            output_keys=['service_response']
        )

        self.service_name = $3
        self.service_client = ProxyServiceCaller({self.service_name: $2})

        self.error = False

    def execute(self, userdata):
        # All the work is already done during on_enter. Let's just return the outcome
        if self.error:
            return 'failed'
        else:
            return 'succeeded'

    def on_enter(self, userdata):
        request = $2Request()

        # TODO: Fill request with userdata
        $0

        try:
            response = self.service_client.call(self.service_name, request)
            userdata.service_response = response
        except Exception as e:
            Logger.logerr(e)
            Logger.logerr('Error while sending the service request.')
            self.error = True
endsnippet

snippet flexbe_action_state
#!/usr/bin/env python
from flexbe_core import EventState, Logger
from flexbe_core.proxy import ProxyActionClient

from ${1:ros_package}.msg import ${2:type}Action, $2Goal


class ExampleActionState(EventState):
    '''
    State that calls the $1/$2 action

    -- ${3:action_namespace} string The action url

`!p snip.rv = input_key_documentation(t[4])`
    #> action_result object The action's result

    <= succeeded The action call succeeded
    <= preempted The action call was preempted
    <= aborted   The action call failed
    '''

  def __init__(self, $3):
        super(`!p snip.rv=to_camel_case_first_title(fn)`).__init__(
            outcomes=['succeeded', 'preempted', 'aborted'],
            input_keys=[${4:input_keys}],
            output_keys=['action_result']
        )

        # Create the action client when building the behavior.
        # This will cause the behavior to wait for the client before starting execution
        # and will trigger a timeout error if it is not available.
        # Using the proxy client provides asynchronous access to the result and status
        # and makes sure only one client is used, no matter how often this state
        # is used in a behavior.
        self._topic = $3
        # pass required clients as dict (topic: type)
        self._client = ProxyActionClient({self._topic: $2Action})

        # It may happen that the action client fails to send the action goal.
        self._error = False

    def execute(self, userdata):
        # While this state is active, check if the action has been finished and
        # Check if the client failed to send the goal.
        if self._error:
            #Logger.logwarn('ABORTED!!!')
            return 'aborted'

        # Check if the action has been finished
        if self._client.has_result(self._cartesian_action_server):
            status = self._client.get_state(self._cartesian_action_server)
	    userdata['action_result'] = self._client.get_result()
            if status == GoalStatus.SUCCEEDED:
                return 'succeeded'
            elif status == GoalStatus.PREEMPTED:
                Logger.loginfo('Action was preempted')
                return 'preempted'
            elif status in [GoalStatus.PREEMPTED, GoalStatus.REJECTED, GoalStatus.RECALLED, GoalStatus.ABORTED]:
                Logger.logwarn('Action failed: %s' % str(status))
                return 'aborted'
        # evaluate the result.

        # If the action has not yet finished, no outcome will be returned and the
        # state stays active.


    def on_enter(self, userdata):
        # When entering this state, we send the action goal once to let the robot start its work.

        # Create the goal.
        goal = $2Goal()

	# TODO: Fill the goal
	$0

        # Send the goal.
        self._error = False  # make sure to reset the error state since a previous state execution might have failed
        try:
            self._client.send_goal(self._topic, goal)
        except Exception as e:
            # Since a state failure not necessarily causes a behavior failure, it is recommended to only print warnings, not errors.
            # Using a linebreak before appending the error log enables the operator to
            # collapse details in the GUI.
            Logger.logwarn('Failed to send the action command:\n%s' % str(e))
            self._error = True

    def on_exit(self, userdata):
        # Make sure that the action is not running when leaving this state.
        # A situation where the action would still be active is for example when
        # the operator manually triggers an outcome.

        if not self._client.has_result(self._topic):
            self._client.cancel(self._topic)
            Logger.loginfo('Cancelled active action goal.')
endsnippet
